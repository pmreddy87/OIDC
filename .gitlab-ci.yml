---
  variables:
    IMAGE: pmreddy87/awscli-v2-terraform-nodejs
    AWS: ${AWS_CLI}

  image:
    name: $IMAGE
    entrypoint: [""]
    #  Define the stages for CI/CD pipeline below
 
  stages:
    -  assume_role
    -  development
    # - build

  assume_role:
     stage: assume_role
     script:
      - echo "$CI_JOB_JWT_V2"
      - env
      - >    
        STS=($(aws sts assume-role-with-web-identity
        --role-arn ${ROLE_ARN}
        --role-session-name "gitlab-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
        --web-identity-token "$CI_JOB_JWT_V2"
        --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
        --output text))
      - echo "AWS_ACCESS_KEY_ID=${STS[0]}" > build.env
      - echo "AWS_SECRET_ACCESS_KEY=${STS[1]}" >> build.env
      - echo "AWS_SESSION_TOKEN=${STS[2]}" >> build.env

     artifacts:
      reports: 
        dotenv: build.env
        
  d_1_plan:
    image:
      name: pmreddy87/awscli-v2-terraform-nodejs
      entrypoint: [""]  
    stage: development
    environment: development
    # allow_failure: true
    script:
      - echo "Executing Plan on Development"
      - AWS_ENV="dev"
      - !reference [.plan, script]
    # dependencies:
      # - assume_role 
    artifacts:
      paths:
        - planfile


  d_2_apply:
    variables:
      AWS_ENV: development
    when: manual
    stage: development
    environment: development
    extends: .deploy

    
  .plan:
    image:
      name: pmreddy87/awscli-v2-terraform-nodejs
      entrypoint: [""]
    before_script:
      - echo $AWS_ACCESS_KEY_ID 
      - echo $AWS_SECRET_ACCESS_KEY
      - echo $AWS_SESSION_TOKEN
      - cat  build.env
      - rm -rf .terraform
    script:
      - echo "Planning $AWS_ENV"
      - cd ${CI_PROJECT_DIR}/terraform
      - aws --version
      - aws sts get-caller-identity
      - terraform init
      - terraform plan -out "planfile" -var "email_username=${EMAIL_USERNAME}" -var "email_token=${EMAIL_TOKEN}" -var "email_host=${EMAIL_HOST}" -var "email_port=${EMAIL_PORT}" -var "email_from=${EMAIL_FROM}" -var "email_to=${EMAIL_TO}" -var "email_origin=${EMAIL_ORIGIN}"

    artifacts:
    paths:
      - ${CI_PROJECT_DIR}/terraform/planfile


  .deploy:
    image:
      name: pmreddy87/awscli-v2-terraform-nodejs
      entrypoint: [""]
    before_script:
      - $AWS
    script:
      - cd ${CI_PROJECT_DIR}/terraform
      - terraform init -reconfigure
      - echo "Deploying $AWS_ENV"
      - terraform apply --auto-approve -var "email_username=${EMAIL_USERNAME}" -var "email_token=${EMAIL_TOKEN}" -var "email_host=${EMAIL_HOST}" -var "email_port=${EMAIL_PORT}" -var "email_from=${EMAIL_FROM}" -var "email_to=${EMAIL_TO}" -var "email_origin=${EMAIL_ORIGIN}"
      - terraform output | sed 's/\s*=\s*/=/g' > tf-output.env
    allow_failure: false
    artifacts:
      reports:
        dotenv: ${CI_PROJECT_DIR}/terraform/tf-output.env

# 
# d_1_plan:
#   image:
#     name: pmreddy87/awscli-v2-terraform-nodejs
#     entrypoint: [""]  
#   stage: development
#   environment: development
#   # allow_failure: true
#   script:
#     - echo "Executing Plan on Development"
#     - AWS_ENV="dev"
#     - !reference [.plan, script]
#   # dependencies:
#     # - assume_role 
#   artifacts:
#     paths:
#       - planfile

# d_2_apply:
#   variables:
#     AWS_ENV: development
#   when: manual
#   stage: development
#   environment: development
#   extends: .deploy
  
# .plan:
#   image:
#     name: pmreddy87/awscli-v2-terraform-nodejs
#     entrypoint: [""]
#   before_script:
#     - echo $AWS_ACCESS_KEY_ID 
#     - echo $AWS_SECRET_ACCESS_KEY
#     - echo $AWS_SESSION_TOKEN
#     - cat  build.env
#     - rm -rf .terraform
#   script:
#     - echo "Planning $AWS_ENV"
#     - cd ${CI_PROJECT_DIR}/terraform
#     - aws --version
#     - aws sts get-caller-identity
#     - terraform init
#     - terraform plan -out "planfile"

# .deploy:
#   image:
#     name: pmreddy87/awscli-v2-terraform-nodejs
#     entrypoint: [""]
#   before_script:
#     - $AWS
#   script:
#     - cd ${CI_PROJECT_DIR}/terraform
#     - terraform init -reconfigure
#     - echo "Deploying $AWS_ENV"
#     - terraform apply --auto-approve
#     - terraform output | sed 's/\s*=\s*/=/g' > tf-output.env
#   allow_failure: false
#   artifacts:
#     reports:
#       dotenv: ${CI_PROJECT_DIR}/terraform/tf-output.env
